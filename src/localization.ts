// src/localization.ts
export type Locale = 'ru' | 'en';

export const defaultLocale: Locale = 'en';

/**
 * Gets the current locale from Obsidian App API (requires minAppVersion >= 1.8.0)
 * Falls back to default locale if API is unavailable
 */
function getCurrentLocale(): Locale {
  if (typeof window === 'undefined') {
    return defaultLocale;
  }
  const appLang = (window as any)?.app?.getLanguage?.();
  if (typeof appLang === 'string') {
    const normalized = appLang.toLowerCase();
    return (normalized.startsWith('ru') ? 'ru' : 'en') as Locale;
  }
  return defaultLocale;
}

export const translations: Record<Locale, Record<string, string>> = {
  ru: {
    // Settings
    'settings.interface': 'üëÄ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —è–∑—ã–∫',
    'settings.subtitle': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ PolyChat, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ —Å –ò–ò –±—ã–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º! üòä',
    'settings.apiHeading': 'üîë –î–æ—Å—Ç—É–ø –∫ API',
    'settings.tailLimitName': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏',
    'settings.tailLimitDesc': '–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏',
    'settings.loadStepName': '–®–∞–≥ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏',
    'settings.loadStepDesc':
      '–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤–≤–µ—Ä—Ö',
    'settings.historyHeading': 'üïì –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞',
    'settings.default10': '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10',
    'settings.default20': '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20',
    'settings.example10': '–ù–∞–ø—Ä–∏–º–µ—Ä: 10',
    'settings.modelSelection': 'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏',
    'settings.saveAll': '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    'settings.settingsSaved': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
    'settings.resetToDefault': '‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
    'settings.settingsReset': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã',
    'settings.resetNotImplemented': '–ú–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω',
    'settings.tokenGetPrefix': '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Groq –º–æ–∂–Ω–æ –Ω–∞ ',
    'settings.tokenOfficialSiteText': '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ Groq API',
    'settings.selectModelPlaceholder': '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å',
    modelDesc: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–≥–∏–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞',
    supportDialogTitle: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É',
    supportDialogClose: '–ó–∞–∫—Ä—ã—Ç—å',
    supportDialogContent:
      '–≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!',
    supportDialogThanksTitle: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PolyChat!',
    supportDialogThanksSupport: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç',
    supportDialogThanksReview: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
    supportDialogThanksContact: '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
    supportDialogGoToSupport: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
    language: '–Ø–∑—ã–∫',
    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    cancel: '–°–±—Ä–æ—Å–∏—Ç—å',
    chatTitle: 'PolyChat',
    authToken: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    // Thanks block
    'thanks.title': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞!',
    apiKey: 'API –∫–ª—é—á',
    apiKeyPlaceholder: '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á',
    checkApiKey: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
    validApiKey: '‚úÖ –ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
    invalidApiKey: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á!',
    model: '–ú–æ–¥–µ–ª—å',
    active: '–ê–∫—Ç–∏–≤–Ω–∞',
    requestsLeft: '–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤',
    tokensLeft: '–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤',
    reset: '–°–±—Ä–æ—Å',
    status: '–°—Ç–∞—Ç—É—Å',
    temperature: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
    maxTokens: '–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤',
    maxTokensPlaceholder: '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
    history: '–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏',
    historyLengthPlaceholder: '20',
    historyFile: '–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏',
    historyFilePlaceholder: 'groq-chat-history.md',
    displayMode: '–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    tab: '–í–æ –≤–∫–ª–∞–¥–∫–µ',
    sidepanel: '–í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏',
    // Tooltips & Dialogs
    supportDev: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É',
    supportDevShort: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å',
    supportDevHeader: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
    modelInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    developer: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
    releaseDate: '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞',
    actualDate: '–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏',
    releaseStatus: '–°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞',
    releaseStatusMain: '–û—Å–Ω–æ–≤–Ω–∞—è',
    releaseStatusPreview: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è',
    you: '–í—ã',
    assistant: '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
    copyError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏',
    close: '–ó–∞–∫—Ä—ã—Ç—å',
    modelUnavailable: '–≠—Ç–∞ –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
    showInSidepanel: '–ü–æ–∫–∞–∑–∞—Ç—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏',
    showInTab: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ',
    scrollToTop: '–ö –Ω–∞—á–∞–ª—É –¥–∏–∞–ª–æ–≥–∞',
    scrollToBottom: '–ö –∫–æ–Ω—Ü—É –¥–∏–∞–ª–æ–≥–∞',
    clearHistory: '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
    showFormatting: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    showFormatted: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
    showRaw: '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥',
    copyRawCode: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥',
    copyMessage: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    rawContent: '–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    chooseModel: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Groq',
    copyCode: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥',
    refreshModels: '–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏',
    modelsUpdated: '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω',
    modelsUpdateError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π',
    showRawCode: '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥',
    hideRawCode: '–°–∫—Ä—ã—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥',
    createNote: '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
    noteCreated: '–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
    noteCreateError: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
    noModelsFound: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
    loadingModels: '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...',
    imageNotice:
      '‚ö†Ô∏è –ß–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞.',
    hasThinking: '–ï—Å—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
    showThinking: '–ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–¥ –º—ã—Å–ª–µ–π',
    hideThinking: '–°–∫—Ä—ã—Ç—å —Ö–æ–¥ –º—ã—Å–ª–µ–π',
    thinkingProcess: '–•–æ–¥ –º—ã—Å–ª–µ–π –º–æ–¥–µ–ª–∏',
    thinkContent: '–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏',
    // MessageList
    showPreviousN: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ {{n}}',
    newMessages: '–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
    // Input (MessageInput)
    inputPlaceholder: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
    inputAriaLabel: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
    sendMessage: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    sendTitle: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å (Ctrl+Enter)',
    inputHint:
      '<kbd>Ctrl</kbd>+<kbd>Enter</kbd> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, <kbd>Shift</kbd>+<kbd>Enter</kbd> ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞',
    inputCounterTitle:
      '–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ / –ú–∞–∫—Å. –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)',
    symbolsTokens: '—Å–∏–º–≤–æ–ª—ã/—Ç–æ–∫–µ–Ω—ã',
    modelIsThinking: '–ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç',
    generatingResponse: '–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç',
    supportButton: 'üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å',
    // Error messages
    apiError: 'API –æ—à–∏–±–∫–∞',
    unknownError: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    emptyMessage: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
    modelNotAvailable: '–ú–æ–¥–µ–ª—å "{{model}}" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞',
    rateLimitExceeded: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    rateLimitsExhausted: '–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω—ã',
    serverError: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    networkError: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
    errorLabel: '–û—à–∏–±–∫–∞',
  },
  en: {
    // Settings
    'settings.interface': 'üëÄ Interface & Language',
    'settings.subtitle': 'Make your AI chat experience as friendly and delightful as possible! üòä',
    'settings.apiHeading': 'üîë API Access',
    'settings.tailLimitName': 'Last messages at startup',
    'settings.tailLimitDesc': 'How many last messages to show without initial scrolling',
    'settings.loadStepName': 'History load step',
    'settings.loadStepDesc': 'How many messages to load when clicking the button or scrolling up',
    'settings.historyHeading': 'üïì Chat History',
    'settings.default10': 'Default: 10',
    'settings.default20': 'Default: 20',
    'settings.example10': 'e.g. 10',
    'settings.modelSelection': 'ü§ñ Model Selection',
    'settings.saveAll': '‚úÖ Save all settings',
    'settings.settingsSaved': 'Settings saved',
    'settings.resetToDefault': '‚ôªÔ∏è Reset to default',
    'settings.settingsReset': 'Settings reset',
    'settings.resetNotImplemented': 'Reset method not implemented',
    'settings.tokenGetPrefix': 'You can get your Groq token at the ',
    'settings.tokenOfficialSiteText': 'official Groq API website',
    'settings.selectModelPlaceholder': 'Select a model',
    modelDesc: 'Choose the model the plugin will use to respond',
    supportDialogTitle: 'Support development',
    supportDialogClose: 'Close',
    supportDialogContent:
      'This plugin is developed by an enthusiast in their free time. Your support will help accelerate development, add new features, and maintain the project in an up-to-date state. Thank you for using it!',
    supportDialogThanksTitle: 'Thank you for using PolyChat!',
    supportDialogThanksSupport: 'Support project',
    supportDialogThanksReview: 'Leave review',
    supportDialogThanksContact: 'Contact developer',
    supportDialogGoToSupport: 'Go to support',
    language: 'Language',
    save: 'Save',
    cancel: 'Reset',
    chatTitle: 'PolyChat',
    authToken: 'Auth Token',
    // Thanks block
    'thanks.title': 'Thank you for using the plugin!',
    apiKey: 'API Key',
    apiKeyPlaceholder: 'Enter API key',
    checkApiKey: 'Check',
    validApiKey: '‚úÖ Key is valid',
    invalidApiKey: '‚ùå Invalid key. Please check your settings!',
    model: 'Model',
    active: 'Active',
    requestsLeft: 'Requests left',
    tokensLeft: 'Tokens left',
    reset: 'Reset',
    status: 'Status',
    temperature: 'Temperature',
    maxTokens: 'Max tokens',
    maxTokensPlaceholder: 'Enter a number',
    history: 'History storage',
    historyLengthPlaceholder: '20',
    historyFile: 'History file',
    historyFilePlaceholder: 'groq-chat-history.md',
    displayMode: 'Display mode',
    tab: 'In tab',
    sidepanel: 'In side panel',
    // Tooltips & Dialogs
    supportDev: 'Support development',
    supportDevShort: 'Support',
    supportDevHeader: 'Support developer',
    modelInfo: 'Model info',
    description: 'Description',
    developer: 'Developer',
    releaseDate: 'Release Date',
    actualDate: 'As of Date',
    releaseStatus: 'Release Status',
    releaseStatusMain: 'Main',
    releaseStatusPreview: 'Preview',
    you: 'You',
    assistant: 'Assistant',
    copyError: 'Error copying to clipboard',
    close: 'Close',
    modelUnavailable: 'This model is temporarily unavailable',
    showInSidepanel: 'Show in Sidepanel',
    showInTab: 'Show in Tab',
    scrollToTop: 'Scroll to top',
    scrollToBottom: 'Scroll to bottom',
    clearHistory: 'Clear history',
    showFormatting: 'Show formatting',
    showFormatted: 'Show formatted text',
    showRaw: 'Show raw',
    copyRawCode: 'Copy raw code',
    copyMessage: 'Copy message',
    rawContent: 'Raw message content',
    chooseModel: 'Choose Groq model',
    copyCode: 'Copy code',
    refreshModels: 'Refresh models',
    modelsUpdated: 'Model list updated',
    modelsUpdateError: 'Error updating model list',
    showRawCode: 'Show raw code',
    hideRawCode: 'Hide raw code',
    createNote: 'Create note',
    noteCreated: 'Note created',
    noteCreateError: 'Failed to create note',
    noModelsFound: 'No available models',
    loadingModels: 'Loading models...',
    imageNotice:
      '‚ö†Ô∏è Chat does not support image rendering. If the model returns an absolute image link, only the link will be shown.',
    hasThinking: 'Has thinking',
    showThinking: 'Show thinking process',
    hideThinking: 'Hide thinking process',
    thinkingProcess: 'Thinking Process',
    thinkContent: 'Model reasoning',
    // MessageList
    showPreviousN: 'Show previous {{n}}',
    newMessages: 'New messages',
    // Input (MessageInput)
    inputPlaceholder: 'Type a message...',
    inputAriaLabel: 'Message input field',
    sendMessage: 'Send message',
    sendTitle: 'Send (Ctrl+Enter)',
    inputHint:
      '<kbd>Ctrl</kbd>+<kbd>Enter</kbd> ‚Äî send, <kbd>Shift</kbd>+<kbd>Enter</kbd> ‚Äî new line',
    inputCounterTitle: 'Current character count / Max model tokens (approximate)',
    symbolsTokens: 'chars/tokens',
    modelIsThinking: 'Model is thinking',
    generatingResponse: 'Generating response',
    supportButton: 'üí∞ Support',
    // Error messages
    apiError: 'API error',
    unknownError: 'Unknown error',
    emptyMessage: 'Message cannot be empty',
    modelNotAvailable: 'Model "{{model}}" is not available',
    rateLimitExceeded: 'Rate limit exceeded. Please try again later.',
    rateLimitsExhausted: 'Request limits exhausted',
    serverError: 'Server error. Please try again later.',
    networkError: 'Network error. Please check your internet connection.',
    errorLabel: 'Error',
  },
};

/**
 * Translates a key to the current or specified locale
 * @param key - The translation key
 * @param locale - Optional locale to use (defaults to current locale)
 * @returns The translated string or the key if translation not found
 */
export function t(key: string, locale: Locale = getCurrentLocale()): string {
  return translations[locale]?.[key] || translations[defaultLocale]?.[key] || key;
}

/**
 * Translates a key containing HTML to the current or specified locale
 * @param key - The translation key
 * @param locale - Optional locale to use (defaults to current locale)
 * @returns An object with __html property containing the translated HTML string
 */
export function tHtml(key: string, locale?: Locale): { __html: string } {
  const loc = locale ?? getCurrentLocale();
  const translation = translations[loc]?.[key] || translations[defaultLocale]?.[key] || key;
  return { __html: translation };
}
